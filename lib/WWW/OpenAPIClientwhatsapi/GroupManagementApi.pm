=begin comment

WhatsAPI Go

The V2 of WhatsAPI Go

The version of the OpenAPI document: 2.0
Contact: manjit@sponsorbook.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::GroupManagementApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# instances_instance_key_groups_admin_get
#
# Get admin groupss.
#
# @param string $instance_key Instance key (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_groups_admin_get' } = {
        summary => 'Get admin groupss.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_groups_admin_get {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_groups_admin_get");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/groups/admin';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_groups_create_post
#
# Create group.
#
# @param string $instance_key Instance key (required)
# @param GroupCreatePayload $data Group create payload (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'data' => {
        data_type => 'GroupCreatePayload',
        description => 'Group create payload',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_groups_create_post' } = {
        summary => 'Create group.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_groups_create_post {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_groups_create_post");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling instances_instance_key_groups_create_post");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/groups/create';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_groups_get
#
# Get all groups.
#
# @param string $instance_key Instance key (required)
# @param string $include_participants Include participants data (optional, default to 'true')
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'include_participants' => {
        data_type => 'string',
        description => 'Include participants data',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_groups_get' } = {
        summary => 'Get all groups.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_groups_get {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_groups_get");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/groups/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'include_participants'}) {
        $query_params->{'include_participants'} = $self->{api_client}->to_query_value($args{'include_participants'});
    }

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_groups_group_id_announce_put
#
# Set group announce.
#
# @param string $instance_key Instance key (required)
# @param boolean $announce Announce status (required)
# @param string $group_id Group id of the group (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'announce' => {
        data_type => 'boolean',
        description => 'Announce status',
        required => '1',
    },
    'group_id' => {
        data_type => 'string',
        description => 'Group id of the group',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_groups_group_id_announce_put' } = {
        summary => 'Set group announce.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_groups_group_id_announce_put {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_groups_group_id_announce_put");
    }

    # verify the required parameter 'announce' is set
    unless (exists $args{'announce'}) {
      croak("Missing the required parameter 'announce' when calling instances_instance_key_groups_group_id_announce_put");
    }

    # verify the required parameter 'group_id' is set
    unless (exists $args{'group_id'}) {
      croak("Missing the required parameter 'group_id' when calling instances_instance_key_groups_group_id_announce_put");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/groups/{group_id}/announce';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'announce'}) {
        my $_base_variable = "{" . "announce" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'announce'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'group_id'}) {
        my $_base_variable = "{" . "group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_groups_group_id_delete
#
# Leaves the group.
#
# @param string $instance_key Instance key (required)
# @param string $group_id Group id of the group (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'group_id' => {
        data_type => 'string',
        description => 'Group id of the group',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_groups_group_id_delete' } = {
        summary => 'Leaves the group.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_groups_group_id_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_groups_group_id_delete");
    }

    # verify the required parameter 'group_id' is set
    unless (exists $args{'group_id'}) {
      croak("Missing the required parameter 'group_id' when calling instances_instance_key_groups_group_id_delete");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/groups/{group_id}/';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'group_id'}) {
        my $_base_variable = "{" . "group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_groups_group_id_description_put
#
# Set group description.
#
# @param string $instance_key Instance key (required)
# @param string $group_id Group id of the group (required)
# @param GroupUpdateDescriptionPayload $data Group description data (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'group_id' => {
        data_type => 'string',
        description => 'Group id of the group',
        required => '1',
    },
    'data' => {
        data_type => 'GroupUpdateDescriptionPayload',
        description => 'Group description data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_groups_group_id_description_put' } = {
        summary => 'Set group description.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_groups_group_id_description_put {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_groups_group_id_description_put");
    }

    # verify the required parameter 'group_id' is set
    unless (exists $args{'group_id'}) {
      croak("Missing the required parameter 'group_id' when calling instances_instance_key_groups_group_id_description_put");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling instances_instance_key_groups_group_id_description_put");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/groups/{group_id}/description';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'group_id'}) {
        my $_base_variable = "{" . "group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_groups_group_id_get
#
# Get group.
#
# @param string $instance_key Instance key (required)
# @param string $group_id Group id of the group (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'group_id' => {
        data_type => 'string',
        description => 'Group id of the group',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_groups_group_id_get' } = {
        summary => 'Get group.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_groups_group_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_groups_group_id_get");
    }

    # verify the required parameter 'group_id' is set
    unless (exists $args{'group_id'}) {
      croak("Missing the required parameter 'group_id' when calling instances_instance_key_groups_group_id_get");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/groups/{group_id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'group_id'}) {
        my $_base_variable = "{" . "group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_groups_group_id_invite_code_get
#
# Get group invite code.
#
# @param string $instance_key Instance key (required)
# @param string $group_id Group id of the group (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'group_id' => {
        data_type => 'string',
        description => 'Group id of the group',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_groups_group_id_invite_code_get' } = {
        summary => 'Get group invite code.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_groups_group_id_invite_code_get {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_groups_group_id_invite_code_get");
    }

    # verify the required parameter 'group_id' is set
    unless (exists $args{'group_id'}) {
      croak("Missing the required parameter 'group_id' when calling instances_instance_key_groups_group_id_invite_code_get");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/groups/{group_id}/invite-code';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'group_id'}) {
        my $_base_variable = "{" . "group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_groups_group_id_lock_put
#
# Set group locked.
#
# @param string $instance_key Instance key (required)
# @param boolean $locked Locked status (required)
# @param string $group_id Group id of the group (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'locked' => {
        data_type => 'boolean',
        description => 'Locked status',
        required => '1',
    },
    'group_id' => {
        data_type => 'string',
        description => 'Group id of the group',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_groups_group_id_lock_put' } = {
        summary => 'Set group locked.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_groups_group_id_lock_put {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_groups_group_id_lock_put");
    }

    # verify the required parameter 'locked' is set
    unless (exists $args{'locked'}) {
      croak("Missing the required parameter 'locked' when calling instances_instance_key_groups_group_id_lock_put");
    }

    # verify the required parameter 'group_id' is set
    unless (exists $args{'group_id'}) {
      croak("Missing the required parameter 'group_id' when calling instances_instance_key_groups_group_id_lock_put");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/groups/{group_id}/lock';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'locked'}) {
        my $_base_variable = "{" . "locked" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'locked'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'group_id'}) {
        my $_base_variable = "{" . "group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_groups_group_id_name_put
#
# Set group name.
#
# @param string $instance_key Instance key (required)
# @param string $group_id Group id of the group (required)
# @param GroupUpdateNamePayload $data Group name data (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'group_id' => {
        data_type => 'string',
        description => 'Group id of the group',
        required => '1',
    },
    'data' => {
        data_type => 'GroupUpdateNamePayload',
        description => 'Group name data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_groups_group_id_name_put' } = {
        summary => 'Set group name.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_groups_group_id_name_put {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_groups_group_id_name_put");
    }

    # verify the required parameter 'group_id' is set
    unless (exists $args{'group_id'}) {
      croak("Missing the required parameter 'group_id' when calling instances_instance_key_groups_group_id_name_put");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling instances_instance_key_groups_group_id_name_put");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/groups/{group_id}/name';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'group_id'}) {
        my $_base_variable = "{" . "group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_groups_group_id_participants_add_post
#
# Add participant.
#
# @param string $instance_key Instance key (required)
# @param string $group_id Group id of the group (required)
# @param GroupUpdateParticipantsPayload $data Group update payload (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'group_id' => {
        data_type => 'string',
        description => 'Group id of the group',
        required => '1',
    },
    'data' => {
        data_type => 'GroupUpdateParticipantsPayload',
        description => 'Group update payload',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_groups_group_id_participants_add_post' } = {
        summary => 'Add participant.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_groups_group_id_participants_add_post {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_groups_group_id_participants_add_post");
    }

    # verify the required parameter 'group_id' is set
    unless (exists $args{'group_id'}) {
      croak("Missing the required parameter 'group_id' when calling instances_instance_key_groups_group_id_participants_add_post");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling instances_instance_key_groups_group_id_participants_add_post");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/groups/{group_id}/participants/add';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'group_id'}) {
        my $_base_variable = "{" . "group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_groups_group_id_participants_demote_put
#
# Demote participant.
#
# @param string $instance_key Instance key (required)
# @param string $group_id Group id of the group (required)
# @param GroupUpdateParticipantsPayload $data Group update payload (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'group_id' => {
        data_type => 'string',
        description => 'Group id of the group',
        required => '1',
    },
    'data' => {
        data_type => 'GroupUpdateParticipantsPayload',
        description => 'Group update payload',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_groups_group_id_participants_demote_put' } = {
        summary => 'Demote participant.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_groups_group_id_participants_demote_put {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_groups_group_id_participants_demote_put");
    }

    # verify the required parameter 'group_id' is set
    unless (exists $args{'group_id'}) {
      croak("Missing the required parameter 'group_id' when calling instances_instance_key_groups_group_id_participants_demote_put");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling instances_instance_key_groups_group_id_participants_demote_put");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/groups/{group_id}/participants/demote';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'group_id'}) {
        my $_base_variable = "{" . "group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_groups_group_id_participants_promote_put
#
# Promote participant.
#
# @param string $instance_key Instance key (required)
# @param string $group_id Group id of the group (required)
# @param GroupUpdateParticipantsPayload $data Group update payload (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'group_id' => {
        data_type => 'string',
        description => 'Group id of the group',
        required => '1',
    },
    'data' => {
        data_type => 'GroupUpdateParticipantsPayload',
        description => 'Group update payload',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_groups_group_id_participants_promote_put' } = {
        summary => 'Promote participant.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_groups_group_id_participants_promote_put {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_groups_group_id_participants_promote_put");
    }

    # verify the required parameter 'group_id' is set
    unless (exists $args{'group_id'}) {
      croak("Missing the required parameter 'group_id' when calling instances_instance_key_groups_group_id_participants_promote_put");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling instances_instance_key_groups_group_id_participants_promote_put");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/groups/{group_id}/participants/promote';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'group_id'}) {
        my $_base_variable = "{" . "group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_groups_group_id_participants_remove_delete
#
# Remove participant.
#
# @param string $instance_key Instance key (required)
# @param string $group_id Group id of the group (required)
# @param GroupUpdateParticipantsPayload $data Group update payload (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'group_id' => {
        data_type => 'string',
        description => 'Group id of the group',
        required => '1',
    },
    'data' => {
        data_type => 'GroupUpdateParticipantsPayload',
        description => 'Group update payload',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_groups_group_id_participants_remove_delete' } = {
        summary => 'Remove participant.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_groups_group_id_participants_remove_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_groups_group_id_participants_remove_delete");
    }

    # verify the required parameter 'group_id' is set
    unless (exists $args{'group_id'}) {
      croak("Missing the required parameter 'group_id' when calling instances_instance_key_groups_group_id_participants_remove_delete");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling instances_instance_key_groups_group_id_participants_remove_delete");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/groups/{group_id}/participants/remove';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'group_id'}) {
        my $_base_variable = "{" . "group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_groups_group_id_profile_pic_put
#
# Set group picture.
#
# @param string $instance_key Instance key (required)
# @param string $group_id Group id of the group (required)
# @param InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest $instances_instance_key_groups_group_id_profile_pic_put_request  (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'group_id' => {
        data_type => 'string',
        description => 'Group id of the group',
        required => '1',
    },
    'instances_instance_key_groups_group_id_profile_pic_put_request' => {
        data_type => 'InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_groups_group_id_profile_pic_put' } = {
        summary => 'Set group picture.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_groups_group_id_profile_pic_put {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_groups_group_id_profile_pic_put");
    }

    # verify the required parameter 'group_id' is set
    unless (exists $args{'group_id'}) {
      croak("Missing the required parameter 'group_id' when calling instances_instance_key_groups_group_id_profile_pic_put");
    }

    # verify the required parameter 'instances_instance_key_groups_group_id_profile_pic_put_request' is set
    unless (exists $args{'instances_instance_key_groups_group_id_profile_pic_put_request'}) {
      croak("Missing the required parameter 'instances_instance_key_groups_group_id_profile_pic_put_request' when calling instances_instance_key_groups_group_id_profile_pic_put");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/groups/{group_id}/profile-pic';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'group_id'}) {
        my $_base_variable = "{" . "group_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'group_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'instances_instance_key_groups_group_id_profile_pic_put_request'}) {
        $_body_data = $args{'instances_instance_key_groups_group_id_profile_pic_put_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_groups_invite_info_get
#
# Get group from invite link.
#
# @param string $instance_key Instance key (required)
# @param string $invite_link The invite link to check (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'invite_link' => {
        data_type => 'string',
        description => 'The invite link to check',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_groups_invite_info_get' } = {
        summary => 'Get group from invite link.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_groups_invite_info_get {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_groups_invite_info_get");
    }

    # verify the required parameter 'invite_link' is set
    unless (exists $args{'invite_link'}) {
      croak("Missing the required parameter 'invite_link' when calling instances_instance_key_groups_invite_info_get");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/groups/invite-info';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'invite_link'}) {
        $query_params->{'invite_link'} = $self->{api_client}->to_query_value($args{'invite_link'});
    }

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

1;
