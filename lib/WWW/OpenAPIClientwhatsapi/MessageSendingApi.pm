=begin comment

WhatsAPI Go

The V2 of WhatsAPI Go

The version of the OpenAPI document: 2.0
Contact: manjit@sponsorbook.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::MessageSendingApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# instances_instance_key_send_audio_post
#
# Send raw audio.
#
# @param string $instance_key Instance key (required)
# @param string $to The recipient&#39;s number (required)
# @param InstancesInstanceKeySendAudioPostRequest $instances_instance_key_send_audio_post_request  (required)
# @param string $caption Attached caption (optional)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'to' => {
        data_type => 'string',
        description => 'The recipient&#39;s number',
        required => '1',
    },
    'instances_instance_key_send_audio_post_request' => {
        data_type => 'InstancesInstanceKeySendAudioPostRequest',
        description => '',
        required => '1',
    },
    'caption' => {
        data_type => 'string',
        description => 'Attached caption',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_send_audio_post' } = {
        summary => 'Send raw audio.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_send_audio_post {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_send_audio_post");
    }

    # verify the required parameter 'to' is set
    unless (exists $args{'to'}) {
      croak("Missing the required parameter 'to' when calling instances_instance_key_send_audio_post");
    }

    # verify the required parameter 'instances_instance_key_send_audio_post_request' is set
    unless (exists $args{'instances_instance_key_send_audio_post_request'}) {
      croak("Missing the required parameter 'instances_instance_key_send_audio_post_request' when calling instances_instance_key_send_audio_post");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/send/audio';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'to'}) {
        $query_params->{'to'} = $self->{api_client}->to_query_value($args{'to'});
    }

    # query params
    if ( exists $args{'caption'}) {
        $query_params->{'caption'} = $self->{api_client}->to_query_value($args{'caption'});
    }

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'instances_instance_key_send_audio_post_request'}) {
        $_body_data = $args{'instances_instance_key_send_audio_post_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_send_button_media_post
#
# Send a button message with a media header.
#
# @param string $instance_key Instance key (required)
# @param ButtonMessageWithMediaPayload $data Message data (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'data' => {
        data_type => 'ButtonMessageWithMediaPayload',
        description => 'Message data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_send_button_media_post' } = {
        summary => 'Send a button message with a media header.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_send_button_media_post {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_send_button_media_post");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling instances_instance_key_send_button_media_post");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/send/button-media';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_send_buttons_post
#
# Send a button message.
#
# @param string $instance_key Instance key (required)
# @param ButtonMessagePayload $data Message data (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'data' => {
        data_type => 'ButtonMessagePayload',
        description => 'Message data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_send_buttons_post' } = {
        summary => 'Send a button message.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_send_buttons_post {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_send_buttons_post");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling instances_instance_key_send_buttons_post");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/send/buttons';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_send_contact_post
#
# Send a contact message.
#
# @param string $instance_key Instance key (required)
# @param ContactMessagePayload $data Message data (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'data' => {
        data_type => 'ContactMessagePayload',
        description => 'Message data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_send_contact_post' } = {
        summary => 'Send a contact message.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_send_contact_post {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_send_contact_post");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling instances_instance_key_send_contact_post");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/send/contact';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_send_document_post
#
# Send raw document.
#
# @param string $instance_key Instance key (required)
# @param string $to The recipient&#39;s number (required)
# @param InstancesInstanceKeySendDocumentPostRequest $instances_instance_key_send_document_post_request  (required)
# @param string $caption Attached caption (optional)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'to' => {
        data_type => 'string',
        description => 'The recipient&#39;s number',
        required => '1',
    },
    'instances_instance_key_send_document_post_request' => {
        data_type => 'InstancesInstanceKeySendDocumentPostRequest',
        description => '',
        required => '1',
    },
    'caption' => {
        data_type => 'string',
        description => 'Attached caption',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_send_document_post' } = {
        summary => 'Send raw document.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_send_document_post {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_send_document_post");
    }

    # verify the required parameter 'to' is set
    unless (exists $args{'to'}) {
      croak("Missing the required parameter 'to' when calling instances_instance_key_send_document_post");
    }

    # verify the required parameter 'instances_instance_key_send_document_post_request' is set
    unless (exists $args{'instances_instance_key_send_document_post_request'}) {
      croak("Missing the required parameter 'instances_instance_key_send_document_post_request' when calling instances_instance_key_send_document_post");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/send/document';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'to'}) {
        $query_params->{'to'} = $self->{api_client}->to_query_value($args{'to'});
    }

    # query params
    if ( exists $args{'caption'}) {
        $query_params->{'caption'} = $self->{api_client}->to_query_value($args{'caption'});
    }

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'instances_instance_key_send_document_post_request'}) {
        $_body_data = $args{'instances_instance_key_send_document_post_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_send_image_post
#
# Send raw image.
#
# @param string $instance_key Instance key (required)
# @param string $to The recipient&#39;s number (required)
# @param InstancesInstanceKeySendImagePostRequest $instances_instance_key_send_image_post_request  (required)
# @param string $caption Attached caption (optional)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'to' => {
        data_type => 'string',
        description => 'The recipient&#39;s number',
        required => '1',
    },
    'instances_instance_key_send_image_post_request' => {
        data_type => 'InstancesInstanceKeySendImagePostRequest',
        description => '',
        required => '1',
    },
    'caption' => {
        data_type => 'string',
        description => 'Attached caption',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_send_image_post' } = {
        summary => 'Send raw image.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_send_image_post {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_send_image_post");
    }

    # verify the required parameter 'to' is set
    unless (exists $args{'to'}) {
      croak("Missing the required parameter 'to' when calling instances_instance_key_send_image_post");
    }

    # verify the required parameter 'instances_instance_key_send_image_post_request' is set
    unless (exists $args{'instances_instance_key_send_image_post_request'}) {
      croak("Missing the required parameter 'instances_instance_key_send_image_post_request' when calling instances_instance_key_send_image_post");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/send/image';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'to'}) {
        $query_params->{'to'} = $self->{api_client}->to_query_value($args{'to'});
    }

    # query params
    if ( exists $args{'caption'}) {
        $query_params->{'caption'} = $self->{api_client}->to_query_value($args{'caption'});
    }

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'instances_instance_key_send_image_post_request'}) {
        $_body_data = $args{'instances_instance_key_send_image_post_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_send_list_post
#
# Send a List message.
#
# @param string $instance_key Instance key (required)
# @param ListMessagePayload $data Message data (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'data' => {
        data_type => 'ListMessagePayload',
        description => 'Message data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_send_list_post' } = {
        summary => 'Send a List message.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_send_list_post {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_send_list_post");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling instances_instance_key_send_list_post");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/send/list';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_send_location_post
#
# Send a location message.
#
# @param string $instance_key Instance key (required)
# @param LocationMessagePayload $data Message data (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'data' => {
        data_type => 'LocationMessagePayload',
        description => 'Message data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_send_location_post' } = {
        summary => 'Send a location message.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_send_location_post {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_send_location_post");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling instances_instance_key_send_location_post");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/send/location';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_send_media_post
#
# Send a media message.
#
# @param string $instance_key Instance key (required)
# @param SendMediaPayload $data Message data (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'data' => {
        data_type => 'SendMediaPayload',
        description => 'Message data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_send_media_post' } = {
        summary => 'Send a media message.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_send_media_post {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_send_media_post");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling instances_instance_key_send_media_post");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/send/media';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_send_poll_post
#
# Send a Poll message.
#
# @param string $instance_key Instance key (required)
# @param PollMessagePayload $data Message data (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'data' => {
        data_type => 'PollMessagePayload',
        description => 'Message data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_send_poll_post' } = {
        summary => 'Send a Poll message.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_send_poll_post {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_send_poll_post");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling instances_instance_key_send_poll_post");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/send/poll';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_send_template_media_post
#
# Send a template message with media.
#
# @param string $instance_key Instance key (required)
# @param TemplateButtonWithMediaPayload $data Message data (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'data' => {
        data_type => 'TemplateButtonWithMediaPayload',
        description => 'Message data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_send_template_media_post' } = {
        summary => 'Send a template message with media.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_send_template_media_post {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_send_template_media_post");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling instances_instance_key_send_template_media_post");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/send/template-media';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_send_template_post
#
# Send a template message.
#
# @param string $instance_key Instance key (required)
# @param TemplateButtonPayload $data Message data (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'data' => {
        data_type => 'TemplateButtonPayload',
        description => 'Message data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_send_template_post' } = {
        summary => 'Send a template message.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_send_template_post {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_send_template_post");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling instances_instance_key_send_template_post");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/send/template';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_send_text_post
#
# Send a text message.
#
# @param string $instance_key Instance key (required)
# @param TextMessage $data Message data (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'data' => {
        data_type => 'TextMessage',
        description => 'Message data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_send_text_post' } = {
        summary => 'Send a text message.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_send_text_post {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_send_text_post");
    }

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling instances_instance_key_send_text_post");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/send/text';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'data'}) {
        $_body_data = $args{'data'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_send_upload_post
#
# Upload media.
#
# @param string $instance_key Instance key (required)
# @param string $type Media type (required)
# @param InstancesInstanceKeySendUploadPostRequest $instances_instance_key_send_upload_post_request  (required)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'type' => {
        data_type => 'string',
        description => 'Media type',
        required => '1',
    },
    'instances_instance_key_send_upload_post_request' => {
        data_type => 'InstancesInstanceKeySendUploadPostRequest',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_send_upload_post' } = {
        summary => 'Upload media.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_send_upload_post {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_send_upload_post");
    }

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling instances_instance_key_send_upload_post");
    }

    # verify the required parameter 'instances_instance_key_send_upload_post_request' is set
    unless (exists $args{'instances_instance_key_send_upload_post_request'}) {
      croak("Missing the required parameter 'instances_instance_key_send_upload_post_request' when calling instances_instance_key_send_upload_post");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/send/upload';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'instances_instance_key_send_upload_post_request'}) {
        $_body_data = $args{'instances_instance_key_send_upload_post_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

#
# instances_instance_key_send_video_post
#
# Send raw video.
#
# @param string $instance_key Instance key (required)
# @param string $to The recipient&#39;s number (required)
# @param InstancesInstanceKeySendVideoPostRequest $instances_instance_key_send_video_post_request  (required)
# @param string $caption Attached caption (optional)
{
    my $params = {
    'instance_key' => {
        data_type => 'string',
        description => 'Instance key',
        required => '1',
    },
    'to' => {
        data_type => 'string',
        description => 'The recipient&#39;s number',
        required => '1',
    },
    'instances_instance_key_send_video_post_request' => {
        data_type => 'InstancesInstanceKeySendVideoPostRequest',
        description => '',
        required => '1',
    },
    'caption' => {
        data_type => 'string',
        description => 'Attached caption',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'instances_instance_key_send_video_post' } = {
        summary => 'Send raw video.',
        params => $params,
        returns => 'APIResponse',
        };
}
# @return APIResponse
#
sub instances_instance_key_send_video_post {
    my ($self, %args) = @_;

    # verify the required parameter 'instance_key' is set
    unless (exists $args{'instance_key'}) {
      croak("Missing the required parameter 'instance_key' when calling instances_instance_key_send_video_post");
    }

    # verify the required parameter 'to' is set
    unless (exists $args{'to'}) {
      croak("Missing the required parameter 'to' when calling instances_instance_key_send_video_post");
    }

    # verify the required parameter 'instances_instance_key_send_video_post_request' is set
    unless (exists $args{'instances_instance_key_send_video_post_request'}) {
      croak("Missing the required parameter 'instances_instance_key_send_video_post_request' when calling instances_instance_key_send_video_post");
    }

    # parse inputs
    my $_resource_path = '/instances/{instance_key}/send/video';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'to'}) {
        $query_params->{'to'} = $self->{api_client}->to_query_value($args{'to'});
    }

    # query params
    if ( exists $args{'caption'}) {
        $query_params->{'caption'} = $self->{api_client}->to_query_value($args{'caption'});
    }

    # path params
    if ( exists $args{'instance_key'}) {
        my $_base_variable = "{" . "instance_key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'instance_key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'instances_instance_key_send_video_post_request'}) {
        $_body_data = $args{'instances_instance_key_send_video_post_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('APIResponse', $response);
    return $_response_object;
}

1;
